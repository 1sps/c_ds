!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
COMPACT	src/bst.c	508;"	d	file:
Child	src/mylib.h	264;"	d
DEQUE_HEAD	src/mylib.h	230;"	d
DEQUE_TAIL	src/mylib.h	231;"	d
FUNCUTILS_H	test/funcutils.h	5;"	d
GRAPH_INT	src/mylib.h	357;"	d
GRAPH_NO_INT	src/mylib.h	358;"	d
GROWTH_RATE	src/mylib.h	261;"	d
INFINITE	src/graph.c	212;"	d	file:
INITIAL_INS_COUNT	test/cllTest.c	42;"	d	file:
INITIAL_INS_COUNT	test/dekTest.c	42;"	d	file:
INITIAL_INS_COUNT	test/llTest.c	42;"	d	file:
INITIAL_INS_COUNT	test/qTest.c	45;"	d	file:
INITIAL_INS_COUNT	test/stTest.c	44;"	d	file:
INITITAL_VERTEX_COUNT	test/graphTest.c	19;"	d	file:
INIT_HEAP_CAP	test/hpTest.c	43;"	d	file:
INIT_INSERT_COUNT	test/hpTest.c	44;"	d	file:
KINT_VINT	src/hash_table.c	45;"	d	file:
KINT_VINT	test/htTest.c	48;"	d	file:
KINT_VSTR	src/hash_table.c	46;"	d	file:
KINT_VSTR	test/htTest.c	49;"	d	file:
KSTR_VINT	src/hash_table.c	47;"	d	file:
KSTR_VINT	test/htTest.c	50;"	d	file:
KSTR_VSTR	src/hash_table.c	48;"	d	file:
KSTR_VSTR	test/htTest.c	51;"	d	file:
MAX_HEAP	src/mylib.h	259;"	d
MAX_NODE_PRINT_LEN	src/mylib.h	333;"	d
MIN_HEAP	src/mylib.h	258;"	d
MYLIB_H	src/mylib.h	34;"	d
NIL	src/graph.c	211;"	d	file:
PRINT_FILE	src/mylib.h	331;"	d
PRINT_STDOUT	src/mylib.h	329;"	d
PRINT_STRING	src/mylib.h	330;"	d
Parent	src/mylib.h	263;"	d
SKIP	src/bst.c	46;"	d	file:
SKIP	src/circular_linked_list.c	17;"	d	file:
SKIP	src/deque.c	39;"	d	file:
SKIP	src/doubly_linked_list.c	39;"	d	file:
SKIP	src/graph.c	16;"	d	file:
SKIP	src/hash_table.c	40;"	d	file:
SKIP	src/heap.c	40;"	d	file:
SKIP	src/queue.c	39;"	d	file:
SKIP	src/singly_linked_list.c	39;"	d	file:
SKIP	src/stack.c	39;"	d	file:
SKIP	test/bstTest.c	42;"	d	file:
SKIP	test/funcutils.c	18;"	d	file:
SKIP	test/graphTest.c	21;"	d	file:
SKIP	test/hpTest.c	41;"	d	file:
SKIP	test/htTest.c	41;"	d	file:
SKIP	test/qTest.c	41;"	d	file:
SKIP	test/stTest.c	40;"	d	file:
TEST_ERR	test/hpTest.c	42;"	d	file:
TEST_ERR	test/htTest.c	42;"	d	file:
TEST_ERR	test/qTest.c	42;"	d	file:
TEST_ERR	test/stTest.c	41;"	d	file:
TOT_SLOTS	test/htTest.c	43;"	d	file:
adjlist	src/mylib.h	/^struct adjlist {$/;"	s
alist	src/mylib.h	/^	struct adjlist **alist;$/;"	m	struct:graph	typeref:struct:graph::adjlist
bfs_process_cur	src/graph.c	/^static void bfs_process_cur(struct graph *g, struct queue *q, int *cur)$/;"	f	file:
bst	src/mylib.h	/^struct bst {$/;"	s
bst_create	src/bst.c	/^struct bst *bst_create(void *(*cpy)(void *), int (*cmp)(void *, void *),$/;"	f
bst_delete	src/bst.c	/^void *bst_delete(struct bst *t, void *delval)$/;"	f
bst_destroy	src/bst.c	/^void bst_destroy(struct bst *t)$/;"	f
bst_destroy_rec	src/bst.c	/^void bst_destroy_rec(struct bst *t)$/;"	f
bst_get_predessor	src/bst.c	/^static struct bst_node **bst_get_predessor(struct bst *t, struct bst_node *bstn)$/;"	f	file:
bst_hlpr_pop_and_destroy	src/bst.c	/^static struct bst_node *bst_hlpr_pop_and_destroy(struct st *s, struct bst *t)$/;"	f	file:
bst_hlpr_print	src/bst.c	/^int bst_hlpr_print(struct bst_node *tree,$/;"	f
bst_hlpr_push_node_to_stack	src/bst.c	/^static void bst_hlpr_push_node_to_stack(struct st *s, struct bst_node *bstn)$/;"	f	file:
bst_hlpr_remove_node	src/bst.c	/^static void *bst_hlpr_remove_node(struct bst *t, struct bst_node *cur,$/;"	f	file:
bst_insert	src/bst.c	/^int bst_insert(struct bst *t, void *newval)$/;"	f
bst_node	src/mylib.h	/^struct bst_node {$/;"	s
bst_node_create	src/bst.c	/^static struct bst_node *bst_node_create(struct bst *t, void *val)$/;"	f	file:
bst_print	src/bst.c	/^void bst_print(struct bst *t)$/;"	f
bst_search	src/bst.c	/^struct bst_node *bst_search(struct bst *t, void *search_val)$/;"	f
cap	src/mylib.h	/^	size_t cap;                   \/* Capacity -> max nmemb *\/$/;"	m	struct:heap
cap	src/mylib.h	/^	size_t cap;$/;"	m	struct:hlpr_ht
cll	src/mylib.h	/^struct cll {$/;"	s
cll_create	src/circular_linked_list.c	/^struct cll *cll_create(void *(*cpy)(void *),$/;"	f
cll_delete	src/circular_linked_list.c	/^void cll_delete(struct cll *l, void *val)$/;"	f
cll_destroy	src/circular_linked_list.c	/^void cll_destroy(struct cll *l)$/;"	f
cll_insert	src/circular_linked_list.c	/^void cll_insert(struct cll *l, void *val)$/;"	f
cll_node	src/mylib.h	/^struct cll_node {$/;"	s
cll_node_create	src/circular_linked_list.c	/^static struct cll_node *cll_node_create(struct cll *l, void *val)$/;"	f	file:
cll_print	src/circular_linked_list.c	/^void cll_print(struct cll *l)$/;"	f
cll_remove_node	src/circular_linked_list.c	/^static void cll_remove_node(struct cll *l,$/;"	f	file:
cll_search	src/circular_linked_list.c	/^int cll_search(struct cll *l, void *val)$/;"	f
cmp	src/mylib.h	/^	int (*cmp)(void *, void *);           \/* compare function *\/$/;"	m	struct:bst
cmp	src/mylib.h	/^	int (*cmp)(void *, void *);           \/* compare function *\/$/;"	m	struct:deque
cmp	src/mylib.h	/^	int (*cmp)(void *, void *);         \/* compare function *\/$/;"	m	struct:cll
cmp	src/mylib.h	/^	int (*cmp)(void *, void *);         \/* compare function *\/$/;"	m	struct:dll
cmp	src/mylib.h	/^	int (*cmp)(void *, void *);        \/* compare function *\/$/;"	m	struct:ll
cmp	src/mylib.h	/^	int (*cmp)(void *, void *);        \/* compare function *\/$/;"	m	struct:queue
cmp	src/mylib.h	/^	int (*cmp)(void *, void *);        \/* compare function *\/$/;"	m	struct:st
cmp	src/mylib.h	/^	int (*cmp)(void *, void *);   \/* Compare funciton *\/$/;"	m	struct:heap
cmp_i	src/graph.c	/^int cmp_i(void *val1, void *val2)$/;"	f
cmp_i	test/cllTest.c	/^int cmp_i(void *val1, void *val2)$/;"	f
cmp_i	test/dekTest.c	/^int cmp_i(void *val1, void *val2)$/;"	f
cmp_i	test/funcutils.c	/^int cmp_i(void *val1, void *val2)$/;"	f
cmp_i	test/llTest.c	/^int cmp_i(void *val1, void *val2)$/;"	f
cmp_i	test/stTest.c	/^int cmp_i(void *val1, void *val2)$/;"	f
cmp_s	test/cllTest.c	/^int cmp_s(void *str1, void *str2)$/;"	f
cmp_s	test/dekTest.c	/^int cmp_s(void *str1, void *str2)$/;"	f
cmp_s	test/funcutils.c	/^int cmp_s(void *str1, void *str2)$/;"	f
cmp_s	test/llTest.c	/^int cmp_s(void *str1, void *str2)$/;"	f
cmp_s	test/stTest.c	/^int cmp_s(void *str1, void *str2)$/;"	f
conv_label_to_int	src/graph.c	/^static int *conv_label_to_int(struct graph *g, void *label)$/;"	f	file:
cpy	src/mylib.h	/^	void *(*cpy)(void *);                 \/* copy function *\/$/;"	m	struct:bst
cpy	src/mylib.h	/^	void *(*cpy)(void *);                 \/* copy function *\/$/;"	m	struct:deque
cpy	src/mylib.h	/^	void *(*cpy)(void *);               \/* copy function *\/$/;"	m	struct:cll
cpy	src/mylib.h	/^	void *(*cpy)(void *);               \/* copy function *\/$/;"	m	struct:dll
cpy	src/mylib.h	/^	void *(*cpy)(void *);              \/* copy function *\/$/;"	m	struct:ll
cpy	src/mylib.h	/^	void *(*cpy)(void *);              \/* copy function *\/$/;"	m	struct:queue
cpy	src/mylib.h	/^	void *(*cpy)(void *);              \/* copy function *\/$/;"	m	struct:st
cpy	src/mylib.h	/^	void *(*cpy)(void *);         \/* Copy funciton *\/$/;"	m	struct:heap
cpy_i	src/graph.c	/^void *cpy_i(void *src)$/;"	f
cpy_i	test/cllTest.c	/^void *cpy_i(void *src)$/;"	f
cpy_i	test/dekTest.c	/^void *cpy_i(void *src)$/;"	f
cpy_i	test/funcutils.c	/^void *cpy_i(void *src)$/;"	f
cpy_i	test/llTest.c	/^void *cpy_i(void *src)$/;"	f
cpy_i	test/stTest.c	/^void *cpy_i(void *src)$/;"	f
cpy_s	test/cllTest.c	/^void *cpy_s(void *src)$/;"	f
cpy_s	test/dekTest.c	/^void *cpy_s(void *src)$/;"	f
cpy_s	test/funcutils.c	/^void *cpy_s(void *src)$/;"	f
cpy_s	test/llTest.c	/^void *cpy_s(void *src)$/;"	f
cpy_s	test/stTest.c	/^void *cpy_s(void *src)$/;"	f
cpy_val_helper_stack	src/bst.c	/^static void *cpy_val_helper_stack(void *bstn)$/;"	f	file:
data	src/hash_table.c	/^	struct ht_data *data;$/;"	m	struct:ht_and_data	typeref:struct:ht_and_data::ht_data	file:
deque	src/mylib.h	/^struct deque {$/;"	s
deque_create	src/deque.c	/^struct deque *deque_create(void *(*cpy)(void *), int (*cmp)(void *, void *),$/;"	f
deque_delete	src/deque.c	/^void deque_delete(struct deque *dek, void *val)$/;"	f
deque_destroy	src/deque.c	/^void deque_destroy(struct deque *dek)$/;"	f
deque_insert	src/deque.c	/^int deque_insert(struct deque *dek, int dir, void *val)$/;"	f
deque_is_empty	src/deque.c	/^int deque_is_empty(struct deque *dek)$/;"	f
deque_node	src/mylib.h	/^struct deque_node {$/;"	s
deque_node_create	src/deque.c	/^static struct deque_node *deque_node_create(struct deque *dek, void *val)$/;"	f	file:
deque_pop	src/deque.c	/^void *deque_pop(struct deque *dek, int dir)$/;"	f
deque_print	src/deque.c	/^void deque_print(struct deque *dek)$/;"	f
deque_search	src/deque.c	/^int deque_search(struct deque *dek, void *val)$/;"	f
dfs_cpy_edge	src/graph.c	/^static void *dfs_cpy_edge(void *val)$/;"	f	file:
dfs_edge	src/graph.c	/^struct dfs_edge {$/;"	s	file:
dfs_process_cur	src/graph.c	/^static void dfs_process_cur(struct graph *g, struct st *st, int cur)$/;"	f	file:
dist	src/mylib.h	/^		int dist;$/;"	m	struct:graph::search_node
dll	src/mylib.h	/^struct dll {$/;"	s
dll_create	src/doubly_linked_list.c	/^struct dll *dll_create(void *(*cpy)(void *), int (*cmp)(void *, void *),$/;"	f
dll_delete	src/doubly_linked_list.c	/^void dll_delete(struct dll *l, void *val)$/;"	f
dll_destroy	src/doubly_linked_list.c	/^void dll_destroy(struct dll *l)$/;"	f
dll_insert	src/doubly_linked_list.c	/^void dll_insert(struct dll *l, void *val)$/;"	f
dll_node	src/mylib.h	/^struct dll_node {$/;"	s
dll_node_create	src/doubly_linked_list.c	/^static struct dll_node *dll_node_create(struct dll *l, void *val)$/;"	f	file:
dll_print	src/doubly_linked_list.c	/^void dll_print(struct dll *l)$/;"	f
dll_search	src/doubly_linked_list.c	/^int dll_search(struct dll *l, void *val)$/;"	f
dval	src/mylib.h	/^	void (*dval) (void *);             \/* value destroy function *\/$/;"	m	struct:st
dval	src/mylib.h	/^	void (*dval)(void *);                 \/* node val destroy function *\/$/;"	m	struct:bst
dval	src/mylib.h	/^	void (*dval)(void *);                 \/* node val destroy function *\/$/;"	m	struct:deque
dval	src/mylib.h	/^	void (*dval)(void *);               \/* node val destroy function *\/$/;"	m	struct:cll
dval	src/mylib.h	/^	void (*dval)(void *);               \/* node val destroy function *\/$/;"	m	struct:dll
dval	src/mylib.h	/^	void (*dval)(void *);              \/* node val destroy function *\/$/;"	m	struct:ll
dval	test/cllTest.c	/^void dval(void *val)$/;"	f
dval	test/dekTest.c	/^void dval(void *val)$/;"	f
dval	test/llTest.c	/^void dval(void *val)$/;"	f
dval_helper_stack	src/bst.c	/^static void dval_helper_stack(void *bstn)$/;"	f	file:
dval_i	src/graph.c	/^void dval_i(void *val)$/;"	f
dval_int_str	test/bstTest.c	/^void dval_int_str(void *val)$/;"	f
get_int_size	src/graph.c	/^int get_int_size(void *vptr)$/;"	f
get_int_size	test/funcutils.c	/^int get_int_size(void *vptr)$/;"	f
get_key_size	src/mylib.h	/^	int (*get_key_size) (void *);      \/* function to get size of key *\/$/;"	m	struct:ht
get_size	src/mylib.h	/^	int (*get_size)(void *);$/;"	m	struct:hlpr_ht
get_sorted_arr	src/heap.c	/^void **get_sorted_arr(struct heap *h)$/;"	f
get_str_size	test/funcutils.c	/^int get_str_size(void *vptr)$/;"	f
graph	src/mylib.h	/^struct graph {$/;"	s
graph_add_edge	src/graph.c	/^void graph_add_edge(struct graph *g, void *src, void *dest)$/;"	f
graph_bfs	src/graph.c	/^int graph_bfs(struct graph *g, void *src, void *dest)$/;"	f
graph_create	src/graph.c	/^struct graph *graph_create(int nvert, int type)$/;"	f
graph_destroy	src/graph.c	/^void graph_destroy(struct graph *g)$/;"	f
graph_dfs	src/graph.c	/^int graph_dfs(struct graph *g, void *src, void *dest)$/;"	f
graph_has_edge	src/graph.c	/^int graph_has_edge(struct graph *g, void *src, void *dest)$/;"	f
graph_print	src/graph.c	/^void graph_print(struct graph *g)$/;"	f
graph_tot_edge	src/graph.c	/^int graph_tot_edge(struct graph *g)$/;"	f
graph_tot_vertex	src/graph.c	/^int graph_tot_vertex(struct graph *g)$/;"	f
h	src/hash_table.c	/^	struct ht *h;$/;"	m	struct:ht_and_data	typeref:struct:ht_and_data::ht	file:
hash_func	src/graph.c	/^static int hash_func(struct ht *h, void *key)$/;"	f	file:
hash_func	src/hash_table.c	/^static int hash_func(struct ht *h, void *key)$/;"	f	file:
hash_func	src/mylib.h	/^	int (*hash_func) (struct ht *, void *);   $/;"	m	struct:ht
head	src/mylib.h	/^	struct cll_node *head;              \/* head of linked list *\/$/;"	m	struct:cll	typeref:struct:cll::cll_node
head	src/mylib.h	/^	struct deque_node *head;              \/* head of deque *\/$/;"	m	struct:deque	typeref:struct:deque::deque_node
head	src/mylib.h	/^	struct dll_node *head;              \/* head of linked list *\/$/;"	m	struct:dll	typeref:struct:dll::dll_node
head	src/mylib.h	/^	struct ll_node *head;              \/* head of linked list *\/$/;"	m	struct:ll	typeref:struct:ll::ll_node
head	src/mylib.h	/^	struct q_node *head;               \/* head of the queue *\/$/;"	m	struct:queue	typeref:struct:queue::q_node
head	src/mylib.h	/^	struct st_node *head;              \/* head(top) of the stack *\/$/;"	m	struct:st	typeref:struct:st::st_node
heap	src/mylib.h	/^struct heap {$/;"	s
hlpr_ht	src/mylib.h	/^struct hlpr_ht {$/;"	s
hp_arr_is_sorted	src/heap.c	/^int hp_arr_is_sorted(struct heap *h, void **arr, size_t nmemb)$/;"	f
hp_copy	src/heap.c	/^static struct heap *hp_copy(struct heap *hsrc) $/;"	f	file:
hp_create	src/heap.c	/^struct heap *hp_create(size_t cap,$/;"	f
hp_destroy	src/heap.c	/^void hp_destroy(struct heap *h)$/;"	f
hp_extract_m	src/heap.c	/^void *hp_extract_m(struct heap *h)$/;"	f
hp_find_m	src/heap.c	/^void *hp_find_m(struct heap *h)$/;"	f
hp_float_down	src/heap.c	/^static void hp_float_down(struct heap *h, int pos)$/;"	f	file:
hp_float_down_max	src/heap.c	/^static void hp_float_down_max(struct heap *h, int pos)$/;"	f	file:
hp_float_down_min	src/heap.c	/^static void hp_float_down_min(struct heap *h, int pos)$/;"	f	file:
hp_float_up	src/heap.c	/^static void hp_float_up(struct heap *h, int pos)$/;"	f	file:
hp_get_size	src/heap.c	/^size_t hp_get_size(struct heap *h)$/;"	f
hp_grow	src/heap.c	/^static void hp_grow(struct heap *h)$/;"	f	file:
hp_insert	src/heap.c	/^void hp_insert(struct heap *h, void *val)$/;"	f
hp_is_empty	src/heap.c	/^int hp_is_empty(struct heap *h)$/;"	f
hp_print	src/heap.c	/^void hp_print(struct heap *h)$/;"	f
hparr	src/mylib.h	/^	void **hparr;                 \/* Array representing heap *\/$/;"	m	struct:heap
ht	src/mylib.h	/^struct ht {$/;"	s
ht_and_data	src/hash_table.c	/^struct ht_and_data {$/;"	s	file:
ht_create	src/hash_table.c	/^struct ht *ht_create(size_t tot_slots,$/;"	f
ht_data	src/mylib.h	/^struct ht_data {$/;"	s
ht_data_cmp	src/hash_table.c	/^static int ht_data_cmp(void *val, void *h_n_d)$/;"	f	file:
ht_data_cpy	src/hash_table.c	/^static void *ht_data_cpy(void *h_n_d) $/;"	f	file:
ht_delete	src/hash_table.c	/^void ht_delete(struct ht *h, void *key)$/;"	f
ht_destroy	src/hash_table.c	/^void ht_destroy(struct ht *h)$/;"	f
ht_insert	src/hash_table.c	/^int ht_insert(struct ht *h, void *key, void *val)$/;"	f
ht_ll_dval	src/hash_table.c	/^static void ht_ll_dval(void *val)$/;"	f	file:
ht_n_d_dencap	src/hash_table.c	/^static void ht_n_d_dencap(struct ht_and_data *htnd)$/;"	f	file:
ht_n_d_encap	src/hash_table.c	/^static struct ht_and_data *ht_n_d_encap(struct ht *h, void *key, void *val)$/;"	f	file:
ht_print	src/hash_table.c	/^void ht_print(struct ht *h, int type)$/;"	f
ht_search	src/hash_table.c	/^int ht_search(struct ht *h, void *key)$/;"	f
iarr_is_sorted	test/hpTest.c	/^int iarr_is_sorted(void **arr, size_t nmemb)$/;"	f
init_search_graph	src/graph.c	/^static void init_search_graph(struct graph *g)$/;"	f	file:
is_test_err	test/hpTest.c	/^int is_test_err(struct heap *h)$/;"	f
is_test_err	test/qTest.c	/^int is_test_err(struct queue *q)$/;"	f
is_test_err	test/stTest.c	/^int is_test_err(struct st *s)$/;"	f
k_cmp	src/mylib.h	/^	int (*k_cmp)(void *, void *);      \/* function to compare keys *\/$/;"	m	struct:ht
k_cpy	src/mylib.h	/^	void *(*k_cpy) (void *);           \/* function to copy key *\/$/;"	m	struct:ht
key	src/mylib.h	/^	void *key;$/;"	m	struct:ht_data
l	src/mylib.h	/^	struct ll *l;$/;"	m	struct:adjlist	typeref:struct:adjlist::ll
left	src/mylib.h	/^	struct bst_node *left;$/;"	m	struct:bst_node	typeref:struct:bst_node::bst_node
ll	src/mylib.h	/^struct ll {$/;"	s
ll_create	src/singly_linked_list.c	/^struct ll *ll_create(void *(*cpy)(void *),$/;"	f
ll_delete	src/singly_linked_list.c	/^void ll_delete(struct ll *l, void *val)$/;"	f
ll_destroy	src/singly_linked_list.c	/^void ll_destroy(struct ll *l)$/;"	f
ll_done	src/singly_linked_list.c	/^int ll_done(void *itr)$/;"	f
ll_first	src/singly_linked_list.c	/^void* ll_first(struct ll *l)$/;"	f
ll_insert	src/singly_linked_list.c	/^void ll_insert(struct ll *l, void *val)$/;"	f
ll_is_empty	src/singly_linked_list.c	/^int ll_is_empty(struct ll *l)$/;"	f
ll_next	src/singly_linked_list.c	/^void* ll_next(struct ll *l, void **itrp)$/;"	f
ll_node	src/mylib.h	/^struct ll_node {$/;"	s
ll_node_create	src/singly_linked_list.c	/^static struct ll_node *ll_node_create(struct ll *l, void *val)$/;"	f	file:
ll_print	src/singly_linked_list.c	/^void ll_print(struct ll *l)$/;"	f
ll_search	src/singly_linked_list.c	/^int ll_search(struct ll *l, void *val)$/;"	f
main	test/bstTest.c	/^int main(void)$/;"	f
main	test/cllTest.c	/^int main(void)$/;"	f
main	test/dekTest.c	/^int main(void)$/;"	f
main	test/graphTest.c	/^int main(void)$/;"	f
main	test/hpTest.c	/^int main(void)$/;"	f
main	test/htTest.c	/^int main(void)$/;"	f
main	test/llTest.c	/^int main(void)$/;"	f
main	test/qTest.c	/^int main(void)$/;"	f
main	test/stTest.c	/^int main(void)$/;"	f
nedge	src/mylib.h	/^	int nedge;$/;"	m	struct:graph
next	src/mylib.h	/^	struct cll_node *next;$/;"	m	struct:cll_node	typeref:struct:cll_node::cll_node
next	src/mylib.h	/^	struct deque_node *next;$/;"	m	struct:deque_node	typeref:struct:deque_node::deque_node
next	src/mylib.h	/^	struct dll_node *next;$/;"	m	struct:dll_node	typeref:struct:dll_node::dll_node
next	src/mylib.h	/^	struct ll_node *next;$/;"	m	struct:ll_node	typeref:struct:ll_node::ll_node
next	src/mylib.h	/^	struct q_node *next;$/;"	m	struct:q_node	typeref:struct:q_node::q_node
next	src/mylib.h	/^	struct st_node *next;$/;"	m	struct:st_node	typeref:struct:st_node::st_node
nmemb	src/mylib.h	/^	size_t nmemb;                         \/* total nodes *\/   $/;"	m	struct:bst
nmemb	src/mylib.h	/^	size_t nmemb;                         \/* total nodes *\/   $/;"	m	struct:deque
nmemb	src/mylib.h	/^	size_t nmemb;                       \/* total nodes *\/   $/;"	m	struct:cll
nmemb	src/mylib.h	/^	size_t nmemb;                       \/* total nodes *\/   $/;"	m	struct:dll
nmemb	src/mylib.h	/^	size_t nmemb;                      \/* total nodes *\/   $/;"	m	struct:ll
nmemb	src/mylib.h	/^	size_t nmemb;                      \/* total nodes *\/   $/;"	m	struct:queue
nmemb	src/mylib.h	/^	size_t nmemb;                      \/* total nodes *\/   $/;"	m	struct:st
nmemb	src/mylib.h	/^	size_t nmemb;                 \/* Number of members *\/$/;"	m	struct:heap
nmemb	src/mylib.h	/^	size_t nmemb;$/;"	m	struct:hlpr_ht
nvert	src/mylib.h	/^	int nvert;$/;"	m	struct:graph
par	src/mylib.h	/^		int par;$/;"	m	struct:graph::search_node
prev	src/mylib.h	/^	struct deque_node *prev;$/;"	m	struct:deque_node	typeref:struct:deque_node::deque_node
prev	src/mylib.h	/^	struct dll_node *prev;$/;"	m	struct:dll_node	typeref:struct:dll_node::dll_node
print_int_dekn	test/dekTest.c	/^void print_int_dekn(struct deque_node *dekn)$/;"	f
print_int_lln	test/cllTest.c	/^void print_int_lln(struct cll_node *lln)$/;"	f
print_int_lln	test/llTest.c	/^void print_int_lln(struct ll_node *lln)$/;"	f
print_str_lln	test/cllTest.c	/^void print_str_lln(struct cll_node *lln)$/;"	f
printl	src/mylib.h	/^	void (*printl) (struct cll_node *); \/* print function *\/$/;"	m	struct:cll
printl	src/mylib.h	/^	void (*printl) (struct deque_node *); \/* print function *\/$/;"	m	struct:deque
printl	src/mylib.h	/^	void (*printl) (struct dll_node *); \/* print function *\/$/;"	m	struct:dll
printl	src/mylib.h	/^	void (*printl) (struct ll_node *); \/* print function *\/$/;"	m	struct:ll
printn	src/mylib.h	/^	void (*printn) (struct bst_node *);   \/* print function *\/$/;"	m	struct:bst
printn	src/mylib.h	/^	void (*printn) (struct q_node *);  \/* print function *\/$/;"	m	struct:queue
printn	src/mylib.h	/^	void (*printn) (struct st_node *); \/* print function *\/$/;"	m	struct:st
printn_i	src/graph.c	/^void printn_i(struct ll_node *lln)$/;"	f
printn_i	test/bstTest.c	/^void printn_i(struct bst_node *bstn)$/;"	f
printn_i	test/hpTest.c	/^void printn_i(void *ptr)$/;"	f
printn_i	test/qTest.c	/^void printn_i(struct q_node *qn)$/;"	f
printn_i	test/stTest.c	/^void printn_i(struct st_node *stn)$/;"	f
printn_s	test/bstTest.c	/^void printn_s(struct bst_node *bstn)$/;"	f
printn_s	test/hpTest.c	/^void printn_s(void *ptr)$/;"	f
printn_s	test/qTest.c	/^void printn_s(struct q_node *qn)$/;"	f
printn_s	test/stTest.c	/^void printn_s(struct st_node *stn)$/;"	f
q_create	src/queue.c	/^struct queue *q_create(void *(*cpy)(void *), $/;"	f
q_destroy	src/queue.c	/^void q_destroy(struct queue *q)$/;"	f
q_is_empty	src/queue.c	/^int q_is_empty(struct queue *q)$/;"	f
q_node	src/mylib.h	/^struct q_node {$/;"	s
q_node_create	src/queue.c	/^static struct q_node *q_node_create(struct queue *q, void *val)$/;"	f	file:
q_pop	src/queue.c	/^void *q_pop(struct queue *q)$/;"	f
q_print	src/queue.c	/^void q_print(struct queue *q)$/;"	f
q_push	src/queue.c	/^void q_push(struct queue *q, void *val)$/;"	f
queue	src/mylib.h	/^struct queue {$/;"	s
right	src/mylib.h	/^	struct bst_node *right;$/;"	m	struct:bst_node	typeref:struct:bst_node::bst_node
root	src/mylib.h	/^	struct bst_node *root; $/;"	m	struct:bst	typeref:struct:bst::bst_node
search_graph	src/mylib.h	/^	} *search_graph;$/;"	m	struct:graph	typeref:struct:graph::search_node
search_node	src/mylib.h	/^	struct search_node {$/;"	s	struct:graph
st	src/mylib.h	/^struct st {$/;"	s
st_create	src/stack.c	/^struct st *st_create(void *(*cpy)(void *),$/;"	f
st_destroy	src/stack.c	/^void st_destroy(struct st *s)$/;"	f
st_is_empty	src/stack.c	/^int st_is_empty(struct st *s)$/;"	f
st_node	src/mylib.h	/^struct st_node {$/;"	s
st_node_create	src/stack.c	/^static struct st_node *st_node_create(struct st *s, void *val)$/;"	f	file:
st_pop	src/stack.c	/^void *st_pop(struct st *s)$/;"	f
st_print	src/stack.c	/^void st_print(struct st *s)$/;"	f
st_push	src/stack.c	/^void st_push(struct st *s, void *val)$/;"	f
swap	src/heap.c	/^static void swap(void **arr, int pos1, int pos2)$/;"	f	file:
table	src/mylib.h	/^	int *table;$/;"	m	struct:hlpr_ht
table	src/mylib.h	/^	struct ll **table;                 \/* table of linked lists *\/$/;"	m	struct:ht	typeref:struct:ht::ll
tail	src/mylib.h	/^	struct cll_node *tail;              \/* tail of linked list *\/$/;"	m	struct:cll	typeref:struct:cll::cll_node
tail	src/mylib.h	/^	struct deque_node *tail;              \/* tail of deque *\/$/;"	m	struct:deque	typeref:struct:deque::deque_node
tail	src/mylib.h	/^	struct q_node *tail;               \/* tail of the queue *\/$/;"	m	struct:queue	typeref:struct:queue::q_node
test_cmp_i	test/funcutils.c	/^int test_cmp_i(int (*cmp)(void *, void *))$/;"	f
test_cmp_s	test/funcutils.c	/^int test_cmp_s(int (*cmp)(void *, void *))$/;"	f
test_cpy_i	test/funcutils.c	/^int test_cpy_i(void *(*cpy)(void *))$/;"	f
test_cpy_s	test/funcutils.c	/^int test_cpy_s(void *(*cpy)(void *))$/;"	f
test_get_size_i	test/funcutils.c	/^int test_get_size_i(int (*get_key_size)(void *))$/;"	f
test_get_size_s	test/funcutils.c	/^int test_get_size_s(int (*get_key_size)(void *))$/;"	f
test_graph_int	test/graphTest.c	/^int test_graph_int(void)$/;"	f
test_graph_int_add_edge	test/graphTest.c	/^int test_graph_int_add_edge(void)$/;"	f
test_graph_int_create	test/graphTest.c	/^int test_graph_int_create(void)$/;"	f
test_graph_int_has_edge	test/graphTest.c	/^int test_graph_int_has_edge(void)$/;"	f
test_heap_int	test/hpTest.c	/^int test_heap_int(void)$/;"	f
test_heap_str	test/hpTest.c	/^int test_heap_str(void)$/;"	f
test_ht_create	test/htTest.c	/^int test_ht_create(struct ht *h, int type)$/;"	f
test_ht_kint_vint	test/htTest.c	/^int test_ht_kint_vint(void)$/;"	f
test_ht_kint_vstr	test/htTest.c	/^int test_ht_kint_vstr(void)$/;"	f
test_ht_kstr_vint	test/htTest.c	/^int test_ht_kstr_vint(void)$/;"	f
test_ht_kstr_vstr	test/htTest.c	/^int test_ht_kstr_vstr(void)$/;"	f
test_int	test/cllTest.c	/^int test_int(void)$/;"	f
test_int	test/dekTest.c	/^int test_int(void)$/;"	f
test_int	test/llTest.c	/^int test_int(void)$/;"	f
test_int	test/stTest.c	/^int test_int(void)$/;"	f
test_int_bst	test/bstTest.c	/^int test_int_bst(void)$/;"	f
test_int_bst_create	test/bstTest.c	/^int test_int_bst_create(void) $/;"	f
test_int_bst_delete	test/bstTest.c	/^int test_int_bst_delete(void)$/;"	f
test_int_bst_insert	test/bstTest.c	/^int test_int_bst_insert(void)$/;"	f
test_int_create	test/cllTest.c	/^int test_int_create(struct cll *l)$/;"	f
test_int_create	test/dekTest.c	/^int test_int_create(struct deque *dek)$/;"	f
test_int_create	test/hpTest.c	/^int test_int_create(struct heap *h)$/;"	f
test_int_create	test/llTest.c	/^int test_int_create(struct ll *l)$/;"	f
test_int_create	test/qTest.c	/^int test_int_create(struct queue *q)$/;"	f
test_int_create	test/stTest.c	/^int test_int_create(struct st *s)$/;"	f
test_int_delete	test/cllTest.c	/^int test_int_delete(struct cll *l)$/;"	f
test_int_delete	test/dekTest.c	/^int test_int_delete(struct deque *dek)$/;"	f
test_int_delete	test/llTest.c	/^int test_int_delete(struct ll *l)$/;"	f
test_int_insert	test/cllTest.c	/^int test_int_insert(struct cll *l)$/;"	f
test_int_insert	test/dekTest.c	/^int test_int_insert(struct deque *dek)$/;"	f
test_int_insert	test/hpTest.c	/^int test_int_insert(struct heap *h)$/;"	f
test_int_insert	test/llTest.c	/^int test_int_insert(struct ll *l)$/;"	f
test_int_iterate	test/llTest.c	/^int test_int_iterate(void)$/;"	f
test_int_pop	test/dekTest.c	/^int test_int_pop(struct deque *dek)$/;"	f
test_int_pop	test/qTest.c	/^int test_int_pop(struct queue *q)$/;"	f
test_int_pop	test/stTest.c	/^int test_int_pop(struct st *s)$/;"	f
test_int_push	test/qTest.c	/^int test_int_push(struct queue *q)$/;"	f
test_int_push	test/stTest.c	/^int test_int_push(struct st *s)$/;"	f
test_int_search	test/cllTest.c	/^int test_int_search(struct cll *l)$/;"	f
test_int_search	test/dekTest.c	/^int test_int_search(struct deque *dek)$/;"	f
test_int_search	test/llTest.c	/^int test_int_search(struct ll *l)$/;"	f
test_q_int	test/qTest.c	/^int test_q_int(void)$/;"	f
test_q_str	test/qTest.c	/^int test_q_str(void)$/;"	f
test_str	test/cllTest.c	/^int test_str(void)$/;"	f
test_str	test/dekTest.c	/^int test_str(void)$/;"	f
test_str	test/llTest.c	/^int test_str(void)$/;"	f
test_str	test/stTest.c	/^int test_str(void)$/;"	f
test_str_bst	test/bstTest.c	/^int test_str_bst(void)$/;"	f
test_str_bst_create	test/bstTest.c	/^int test_str_bst_create(void) $/;"	f
test_str_create	test/cllTest.c	/^int test_str_create(struct cll *l)$/;"	f
test_str_create	test/dekTest.c	/^int test_str_create(struct deque *dek)$/;"	f
test_str_create	test/hpTest.c	/^int test_str_create(struct heap *h)$/;"	f
test_str_create	test/llTest.c	/^int test_str_create(struct ll *l)$/;"	f
test_str_create	test/qTest.c	/^int test_str_create(struct queue *q)$/;"	f
test_str_create	test/stTest.c	/^int test_str_create(struct st *s)$/;"	f
test_str_delete	test/cllTest.c	/^int test_str_delete(struct cll *l)$/;"	f
test_str_delete	test/dekTest.c	/^int test_str_delete(struct deque *dek)$/;"	f
test_str_delete	test/llTest.c	/^int test_str_delete(struct ll *l)$/;"	f
test_str_insert	test/cllTest.c	/^int test_str_insert(struct cll *l)$/;"	f
test_str_insert	test/dekTest.c	/^int test_str_insert(struct deque *dek)$/;"	f
test_str_insert	test/hpTest.c	/^int test_str_insert(struct heap *h)$/;"	f
test_str_insert	test/llTest.c	/^int test_str_insert(struct ll *l)$/;"	f
test_str_pop	test/dekTest.c	/^int test_str_pop(struct deque *dek)$/;"	f
test_str_pop	test/qTest.c	/^int test_str_pop(struct queue *q)$/;"	f
test_str_pop	test/stTest.c	/^int test_str_pop(struct st *s)$/;"	f
test_str_push	test/qTest.c	/^int test_str_push(struct queue *q)$/;"	f
test_str_push	test/stTest.c	/^int test_str_push(struct st *s)$/;"	f
test_str_search	test/cllTest.c	/^int test_str_search(struct cll *l)$/;"	f
test_str_search	test/dekTest.c	/^int test_str_search(struct deque *dek)$/;"	f
test_str_search	test/llTest.c	/^int test_str_search(struct ll *l)$/;"	f
tot_slots	src/mylib.h	/^	size_t tot_slots;                  \/* total slots in table *\/$/;"	m	struct:ht
type	src/mylib.h	/^	char type;                    \/* Type of heap (min or max) *\/$/;"	m	struct:heap
type	src/mylib.h	/^	int type;$/;"	m	struct:graph
u	src/graph.c	/^	int u;$/;"	m	struct:dfs_edge	file:
v	src/graph.c	/^	int v;$/;"	m	struct:dfs_edge	file:
v_cmp	src/mylib.h	/^	int (*v_cmp)(void *, void *);      \/* function to compare vals *\/$/;"	m	struct:ht
v_cpy	src/mylib.h	/^	void *(*v_cpy) (void *);           \/* function to copy val *\/$/;"	m	struct:ht
val	src/mylib.h	/^	void *val;$/;"	m	struct:bst_node
val	src/mylib.h	/^	void *val;$/;"	m	struct:cll_node
val	src/mylib.h	/^	void *val;$/;"	m	struct:deque_node
val	src/mylib.h	/^	void *val;$/;"	m	struct:dll_node
val	src/mylib.h	/^	void *val;$/;"	m	struct:ht_data
val	src/mylib.h	/^	void *val;$/;"	m	struct:ll_node
val	src/mylib.h	/^	void *val;$/;"	m	struct:q_node
val	src/mylib.h	/^	void *val;$/;"	m	struct:st_node
vtx	src/mylib.h	/^		int vtx;$/;"	m	struct:graph::search_node
